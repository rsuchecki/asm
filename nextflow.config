// Global default params, used in configs
params {
  version = '0.1' //Pipeline version
  outdir = "./results"
  publishmode = "symlink"
  //NUMBER OF INPUT LINES TO BE PROOCESSED FOR TRIAL PURPOSES, DEFAULT null WILL PROCESS WHOLE DATASETS
  trialLines = null
}
//Default inputs
//includeConfig 'conf/input.config'
//Output publishing conf
includeConfig 'conf/publish.config'

profiles {
  standard {
    process.executor = 'local'
    // includeConfig 'conf/requirements.config'
  }
  modules {
    includeConfig 'conf/modules.config'
  }
  // docker {
  //   includeConfig 'conf/containers.config'
  //   docker {
  //     enabled = true
  //     fixOwnership = true
  //   }
  // }
  // slurm {
  //   includeConfig 'conf/requirements.config'
  //   process.executor = 'slurm'
  // }
  // singularity {
  //   includeConfig 'conf/containers.config'
  //   singularity {
  //     enabled = true
  //     autoMounts = true
  //     cacheDir = "${HOME}/singularity-images"
  //   }
  // }
  // singularitymodule {
  //   process.module = 'singularity/2.4.0'
  // }
}

// process {
//   errorStrategy = 'terminate' //'ignore'
// }

//GENERATE REPORT https://www.nextflow.io/docs/latest/tracing.html#trace-report
report {
    enabled = true
    file = "${params.outdir}/flowinfo/report.html"
}

//GENERATE TIMELINE https://www.nextflow.io/docs/latest/tracing.html#timeline-report
timeline {
    enabled = true
    timeline.file = "${params.outdir}/flowinfo/timeline.html"
}

//GENERATE PIPELINE TRACE https://www.nextflow.io/docs/latest/tracing.html#trace-report
trace {
    enabled = true
    file = "${params.outdir}/flowinfo/trace.txt"
}

//FROM: https://github.com/SciLifeLab/NGI-smRNAseq/blob/29c41afd45011874ed9920c5065ddff93791e3cf/nextflow.config
// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    if(obj.compareTo(params.max_memory) == 1)
      return params.max_memory
    else
      return obj
  } else if(type == 'time'){
    if(obj.compareTo(params.max_time) == 1)
      return params.max_time
    else
      return obj
  } else if(type == 'cpus'){
    return Math.min( obj, params.max_cpus )
  }
}
